{"version":3,"sources":["webpack:///./src/app/pages/paypalweb/paypalweb.html","webpack:///./src/app/pages/paypalweb/paypalweb.module.ts","webpack:///./src/app/pages/paypalweb/paypalweb.page.ts"],"names":[],"mappings":"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","file":"pages-paypalweb-paypalweb-module.js","sourcesContent":["module.exports = \"<ion-header>\\n\\t<ion-toolbar color=\\\"primary\\\">\\n\\t\\t<ion-menu-toggle>\\n<ion-button>\\n\\t\\t\\t<ion-icon name=\\\"menu\\\"></ion-icon>\\n\\t\\t</ion-button>\\n</ion-menu-toggle>\\n\\t\\t<ion-title>PayPal</ion-title>\\n\\t</ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n<!-- ion-card *ngIf=\\\"userinfoready\\\">\\n\\t<ion-card-header>\\n         Plan: {{userinfo.myuserinfo.activeplanname}}\\n\\t</ion-card-header>\\n\\t<ion-card-content>\\n         Plan description: {{userinfo.myuserinfo.activeplandescription}}\\n         <h3>Starts from: {{userinfo.myuserinfo.planstartdate  |date: \\\"yyyy/MM/dd\\\"}} </h3>\\n         <h3>Remaining days: {{userinfo.myuserinfo.plandays}}\\n</h3>\\n<h3>\\n         Remaining transactions: {{userinfo.myuserinfo.plantransactions}}\\n</h3>\\n\\t</ion-card-content>\\n</ion-card>\\n<ion-list *ngFor=\\\"let item of itemplans\\\">\\n<ion-card>\\n\\t<ion-card-header>\\n         {{item.plandescription}}\\n\\t</ion-card-header>\\n\\t<ion-card-content>\\n         {{item.description}}\\n        <ion-label class=\\\"ion-text-wrap\\\">\\n                 <h3> {{item.price}} {{item.unit}} </h3>\\n            </ion-label>\\n        <ion-item>\\n        <ion-button  item-left small class=\\\"colorbutton\\\" (click)=\\\"select(item)\\\">Select</ion-button>\\n   <ion-checkbox checked=\\\"true\\\" *ngIf=\\\"itemselected.plandescription == item.plandescription\\\"  > </ion-checkbox>\\n            <ion-label item-right *ngIf=\\\"itemselected.plandescription == item.plandescription\\\">  Pay below\\n            </ion-label>\\n        </ion-item>\\n\\n\\t</ion-card-content>\\n</ion-card>\\n</ion-list -->\\n\\n<ngx-paypal [config]=\\\"payPalConfig\\\"></ngx-paypal>\\n\\n</ion-content>\\n\"","import { IonicModule } from '@ionic/angular';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\n//import { PayPal } from '@ionic-native/paypal';\nimport { RouterModule } from '@angular/router';\n\n\n//import { IonicPageModule } from '@ionic/angular';\nimport { NgxPayPalModule } from 'ngx-paypal';\n\nimport { PayPalWebPage } from './paypalweb.page';\n\n@NgModule({\n\tdeclarations: [\n\t\tPayPalWebPage\n\t],\n  imports: [\n    NgxPayPalModule,\n     RouterModule.forChild([\n      {\n        path: '',\n        component: PayPalWebPage\n      }\n    ])\n\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n\n})\nexport class PayPalWebModule {\n\n}\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { PayPalFunding, PayPalConfig, PayPalEnvironment, PayPalIntegrationType } from 'ngx-paypal';\nimport { environment } from '../config/environment';\nimport { Storage } from '@ionic/storage';\n\nimport { Events } from '@ionic/angular';\nimport { Logger } from '../../providers/logger/logger';\n\n\nlet paypalnetwork = environment.paypalnetwork;\n\n\n@Component({\n        selector: 'paypalweb-page',\n\ttemplateUrl: 'paypalweb.html'\n})\n\n// 'AXNnbd5G4mTU34GPNNanfShMnNFHnZaCzPeA0iN3FJbkEaX7NTwLjpIK7dmnuLlkesUBGTdPqLIpSSZm'\nexport class PayPalWebPage implements OnInit {\n    \n    itemselected : any; \n    userinfoready: boolean= false;\n    private myconfig: any;\n    itemplans = [\n       {\n\tplan: \"subscribed\",\n\tplandescription: \"Test 100 plan\",\n\tdescription: \"Provides 10 message processing at 50% discount on fees. This discount applies to sending and receiving messages for 10 days. Not applicable to insta message sent\",\n        price: 100,\n        days: 10,\n        transactions: 10,\n        unit: \"USD\",\n      },\n       {\n\tplan: \"subscribed\",\n\tplandescription: \"Test 200 plan\",\n\tdescription: \"Provides 20 message processing at 50% discount on fees. This discount applies to sending and receiving messages for 20 days. Not applicable to insta messages sent \",\n        price: 200,\n        days: 20,\n        transactions: 20,\n        unit: \"USD\",\n       },\n       {\n\tplan: \"subscribed\",\n\tplandescription: \"Test 500 plan\",\n\tdescription: \"Provides 50 message processing at 50% discount on fees. This discount applies to sending and receiving messages for 50 days. Not applicable to insta messages sent \",\n        price: 500,\n        days: 50,\n        transactions: 50,\n        unit: \"USD\",\n       }\n    ];\n\n\n    public payPalConfig?: PayPalConfig;\n    keyobj : any;\n    constructor(\n                //public alertCtrl: Popservice,\n                private storage: Storage,\n                private events: Events,\n                private logger: Logger,\n\n    ) {\n     this.onEntryWork() ;\n/*\n      if(this.userinfo && this.userinfo.myuserinfo) {\n        if(this.userinfo.myuserinfo.activeplanname == 'expired'){\n\n        }\n      }\n*/\n/*\n planstartdate: string;\n       activeplanfixesfees: string;\n       activeplanvariabefees: string;\n       planenddate: string;\n\n*/\n    }\n\n  onEntryWork() {\n//    this.userinfo.storeRestore();\n  }\n\n    ionViewDidEnter() {\n     this.onEntryWork() ;\n \n    }\n\n    activateplan() {\n        var plan = {\n \tactiveplanname: this.itemselected.plan,\n \tactiveplandescription: this.itemselected.plandescription,\n \tplanstartdate: Date.now().toString(),\n       activeplanfixedfees: 0.00001,\n       activeplanvariablefees: 4,\n       plandays: this.itemselected.plandays,\n       plantransactions: this.itemselected.plantransactions,\n\n        };\n//\tthis.userinfo.updatePlanTaken(plan);\n\n    }\n   \n    select(item) {\n      this.itemselected = item;\n\n      var a =  {\n                amount: { \n                total: this.itemselected.price,\n                currency: this.itemselected.unit,\n                },\n \t\tdescription: this.itemselected.plan,\n         };\n\n      this.myconfig.transactions.length = 0;\n      this.myconfig.transactions.push(a);\n      this.initConfig(this.myconfig);\n      // this.popservice.presentAlert(\"Make payment below\");\n    }\n\n   initselect(item) {\n      this.itemselected = item;\n\n      var a =  {\n                amount: {\n                total: this.itemselected.price,\n                currency: this.itemselected.unit,\n                },\n                description: this.itemselected.plan,\n         };\n\n      this.myconfig.transactions.length = 0;\n      this.myconfig.transactions.push(a);\n      this.initConfig(this.myconfig);\n    }\n\n\n    ngOnInit(): void {\n\n    \n\n    if(paypalnetwork == \"sandbox\") {\n        this.keyobj = {\n            sandbox: environment.payPalEnvironmentSandbox\n        };\n\n    } else {\n      this.keyobj = {\n            production: environment.payPalEnvironmentProduction\n      };\n    }\n    \n    this.myconfig = {\n          commit: true,\n          client: this.keyobj,\n\n/*{\n\t      sandbox:\n 'AXNnbd5G4mTU34GPNNanfShMnNFHnZaCzPeA0iN3FJbkEaX7NTwLjpIK7dmnuLlkesUBGTdPqLIpSSZm'\n//            production:\n//              'AVjh_x-F8Gh-pNDiqytQ-srUd2evg26mtCqU3AbnVY_pHJvsgC9V2gRgXj_2jt6cDmO2SsHdekfoBSQ3'\n          },\n*/\n          button: {\n            label: 'paypal',\n            layout: 'vertical'\n          },\n          experience: {\n            noShipping: true,\n            brandName: 'PuppiPay'\n          },\n          funding: {\n            allowed: [\n\t\t\tPayPalFunding.Card,  \n\t\t\tPayPalFunding.Credit,  \n\t\t\tPayPalFunding.Elv,  \n                     ]\n          },\n          onPaymentComplete :  (data, actions) => {\n            this.logger.log(\"OnPaymentComplete:\" + JSON.stringify(data));\n            this.logger.log(\"OnPaymentComplete:\" + JSON.stringify(actions));\n            this.activateplan() ;\n            this.logger.log('OnPaymentComplete');\n          },\n          transactions: [\n            {\n              amount: {\n                total: 30,\n                currency: 'USD',\n              },\n              description: 'testing',\n           }\n          ],\n          note_to_payer: 'Contact us if you have troubles processing payment'\n        };\n     this.initselect(this.itemplans[0]); \n\n//    this.activateplan() ;\n    }\n\n    onValueChange() {\n\n    }\n\n    private initConfig(config): void {\n      this.logger.log(config);\n    if(paypalnetwork == \"sandbox\") {\n      this.payPalConfig = new PayPalConfig(\n        PayPalIntegrationType.ClientSideREST,\n//        PayPalEnvironment.Production,\n        PayPalEnvironment.Sandbox,\n        config\n      );\n     } else {\n        this.payPalConfig = new PayPalConfig(\n        PayPalIntegrationType.ClientSideREST,\n        PayPalEnvironment.Production,\n//        PayPalEnvironment.Sandbox,\n        config\n      );\n\n\n     }\n    }\n    onPaymentComplete1(data, actions) \n    {\n // go to next screen\n// update plan \n    this.activateplan() ;\n            this.logger.log('OnPaymentComplete');\n    }\n  \n  }\n  \n\n/*\n          onPaymentComplete: (data, actions) => {\n            this.logger.log('OnPaymentComplete');\n          },\n          onCancel: (data, actions) => {\n            this.logger.log('OnCancel');\n          },\n          onError: err => {\n            this.logger.log('OnError');\n          },\n          onClick: () => {\n            this.logger.log('onClick');\n          },\n          validate: (actions) => {\n            this.logger.log(actions);\n          }, */\n"],"sourceRoot":""}